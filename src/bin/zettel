#!/usr/bin/env python3

# This file is part of Zettel.
#
# Copyright (c) Alexander Haase <ahaase@alexhaase.de>
#
# This project is licensed under the MIT License. For the full copyright and
# license information, please view the LICENSE file that was distributed with
# this source code.

import argparse
import yaml


def getArgs() -> argparse.Namespace:
    """
    Parse command line arguments.

    This function parses the application's command line arguments and returns
    the :py:class:`argparse.Namespace` to access the passed argument values. If
    necessary, this function emits a usage message and raises an error on
    invalid arguments or values.


    :returns: A :py:class:`argparse.Namespace` to access the argument values.
    """
    parser = argparse.ArgumentParser()

    parser.add_argument('config',
                        type=parseConfig,
                        help='configuration file to use')

    # Parse the command line arguments and return the generated namespace. If
    # an argument is unknown, or its value does not match the specification, an
    # error message will be generated and the help message shown.
    return parser.parse_args()


def parseConfig(file: str) -> dict:
    """
    Parse the configuration file.

    This function opens a given ``file``, parses its YAML encoded contents and
    returns the configuration as dictionary.


    :param file: The file to be loaded.

    :returns: The parsed YAML configuration as dictionary.
    """
    with open(file) as f:
        return yaml.safe_load(f)


# ========================
# Run the main application
# ========================

if __name__ == '__main__':
    # Parse the command line arguments. If necessary, this function will print
    # error messages and exits the application on errors.
    args = getArgs()
